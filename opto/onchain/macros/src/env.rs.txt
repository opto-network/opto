struct PredicateEnvironment;

const _: () = {
	use {
		core::time::Duration,
		#core_crate::{Digest, Environment},
	};

	impl Environment for PredicateEnvironment {
		fn block_number(&self) -> u32 {
			unsafe { syscalls::block_number() }
		}

		fn history_len(&self) -> u32 {
			unsafe { syscalls::history_len() }
		}

		fn time_at(&self, block: u32) -> Option<Duration> {
			let time = unsafe { syscalls::time_at(block) };

			if time == 0 {
				return None;
			}

			Some(Duration::from_secs(time as u64))
		}

		fn vrf_at(&self, block: u32) -> Option<opto_core::Digest> {
			let digest: Digest = from_tuple(unsafe { syscalls::vrf_at(block) });

			if digest == Digest::ZERO {
				return None;
			}

			Some(digest)
		}
	}

	mod syscalls {
		#[link(wasm_import_module = "env")]
		extern "C" {
			pub fn block_number() -> u32;
			pub fn history_len() -> u32;
			pub fn time_at(block: u32) -> u32;

			#[allow(improper_ctypes)] // wasm support multi-return
			pub fn vrf_at(block: u32) -> (u32, u32, u32, u32, u32, u32, u32, u32);
		}
	}

	const fn from_tuple(
		t: (u32, u32, u32, u32, u32, u32, u32, u32),
	) -> opto_core::Digest {
		let array: [u8; 32] = [
			(t.0 >> 24) as u8,
			(t.0 >> 16) as u8,
			(t.0 >> 8) as u8,
			t.0 as u8,
			(t.1 >> 24) as u8,
			(t.1 >> 16) as u8,
			(t.1 >> 8) as u8,
			t.1 as u8,
			(t.2 >> 24) as u8,
			(t.2 >> 16) as u8,
			(t.2 >> 8) as u8,
			t.2 as u8,
			(t.3 >> 24) as u8,
			(t.3 >> 16) as u8,
			(t.3 >> 8) as u8,
			t.3 as u8,
			(t.4 >> 24) as u8,
			(t.4 >> 16) as u8,
			(t.4 >> 8) as u8,
			t.4 as u8,
			(t.5 >> 24) as u8,
			(t.5 >> 16) as u8,
			(t.5 >> 8) as u8,
			t.5 as u8,
			(t.6 >> 24) as u8,
			(t.6 >> 16) as u8,
			(t.6 >> 8) as u8,
			t.6 as u8,
			(t.7 >> 24) as u8,
			(t.7 >> 16) as u8,
			(t.7 >> 8) as u8,
			t.7 as u8,
		];

		Digest::new(array)
	}
};
